{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2024-07-09T01:34:47.992759+00:00",
  "repo": "davidben/tls-trust-expressions",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    }
  ],
  "issues": [
    {
      "number": 1,
      "id": "I_kwDOKigz-s50ZUKW",
      "title": "Allow pruning deactivated trust anchors?",
      "url": "https://github.com/davidben/tls-trust-expressions/issues/1",
      "state": "OPEN",
      "author": "davidben",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "The document is currently written to be append-only, which is correct for X.509 and also shouldn't grow significantly. @bwesterb points out Merkle tree certs have different properties:\r\n\r\n1. MTC trust anchors are minted every hour\r\n2. MTC trust anchors naturally deactivate themselves\r\n\r\nProperty 1 means the manifest will grow over time and potentially get unwieldy. But property 2 implies an easy fix. Once an MTC trust anchor expires, there is no benefit to listing it in the manifest beyond historical interest. So we could potentially allow those to get trimmed. That will, in turn, allow trimming the old versions since they become empty. We have no way to express either of these, so we may want to add some allowance for this in the format.\r\n\r\nWe also don't necessarily need to do this here. Since the manifest document is consumed by just the root programs and CAs, who know what type of CA they are, we can always put this extra allowance in the MTC document. But it would be convenient if the changes slot nicely into the existing format, so we may want to look at this a bit.",
      "createdAt": "2023-10-19T18:00:38Z",
      "updatedAt": "2023-11-20T23:07:06Z",
      "closedAt": null,
      "comments": [
        {
          "author": "aarongable",
          "authorAssociation": "NONE",
          "body": "This was my first thought when I read the draft -- unlimited growth with no way to prune old versions which contain only expired anchors will be a footgun, whether it's for reasons we can forsee right now or not. I'm strongly in favor of allowing pruning.",
          "createdAt": "2023-11-20T20:51:01Z",
          "updatedAt": "2023-11-20T20:51:01Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "OWNER",
          "body": "Other than syntactic concerns (we'd need to start the counter later in the JSON document, or add a `version` key), I think the main consideration with pruning them is what happens to older RPs:\r\n\r\nA root program might stop really paying attention to old relying parties after, let's say, 1 year. (I'm making this number up.) E.g. If some Chrome hasn't taken software or component updates for so long, it's probably going to stay that way. Even if the private key of one of its CAs leaked online, if we cannot push code or config to those clients, we can't help them anyway.\r\n\r\nBut that says nothing about whether web servers care about serving those Chromes (and anyone else using the trust store version). That may happen for longer. Examples:\r\n\r\n* Maybe some old version of Chromium ended up in an old Electron that some popular apps are still using\r\n* Maybe this is on unupdated copy of WebView\r\n* Maybe this server is part of some enterprise deployment that has intentionally stayed on a very old Chrome\r\n* Maybe this server is just very popular and very risk-averse and doesn't want to stop serving those clients\r\n* Maybe this isn't Chromium at all, but and some other root program spun off, forked off of the Chrome list initially, and is still sending an old Chrome trust store name for compatibility while certs update their metadata.\r\n* Maybe this is some random IoT device that copied the root store as of some year and never updated it ever again\r\n\r\nCAs will need metadata about those old trust store versions for as long as they wish to serve subscribers that, in turn, which to serve these relying parties. In most of these cases, that schedule is completely detached from the root program that maintains the manifest.\r\n\r\nThis doesn't _really_ matter because the old versions are frozen and the CA can always just hold on to the old file before the root program stops trying to serve it. But I'm sure folks will mess this up, and it seems easier to not tempt fate if the growth isn't actually a problem. (Of course, if it is a problem, that's a whole different matter. I also wouldn't want to tempt fate if we think growth is fine and it turns out to be bad...)\r\n\r\nAside: There is arguably _a_ way to prune it as-is. It's just gross and terrible. :-) Just make a new trust store name. But this causes a minor bit of disruption at the transition point. (I think RPs would need to send trust expressions for both names for a spell.) Depending on how unforeseeable this unforeseen thing is, that can always been an option in a pinch. ",
          "createdAt": "2023-11-20T23:04:49Z",
          "updatedAt": "2023-11-20T23:07:06Z"
        }
      ]
    },
    {
      "number": 3,
      "id": "I_kwDOKigz-s501GPP",
      "title": "Tidy up who prepares trust expressions",
      "url": "https://github.com/davidben/tls-trust-expressions/issues/3",
      "state": "OPEN",
      "author": "davidben",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "We mostly want it to be the root program, but relying parties might end up tweaking things if, say, something is conditioned on software version. I was envisioning the root program sends down some private structure like \"also include these exclusions under these conditions\", etc., but that's very hard to describe.\r\n\r\nPerhaps a better separation is to say:\r\n* Root programs compute the compatibility exclusions\r\n* Better yet, stick them in the manifest so people can easily use them; root programs periodically recompute them to trim away stuff they don't need anymore\r\n* Relying parties take the mandatory ones from the manifest and then add in their own as needed. If that task is half done by the software vendor and half done on the client device, that's the application's business, but we describe it as the relying party doing it.\r\n\r\nThe problem is that computing exclusions is a little tricky. Maybe we need to mark which label is the singleton one, so that computing the label set is always possible? This does add quite a lot more moving parts though.",
      "createdAt": "2023-10-24T21:07:21Z",
      "updatedAt": "2023-10-24T21:07:21Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 4,
      "id": "I_kwDOKigz-s52V37W",
      "title": "Limit to TLS 1.3 and up",
      "url": "https://github.com/davidben/tls-trust-expressions/issues/4",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "The certificate message extension doesn't work otherwise. Just add a sentence somewhere.",
      "createdAt": "2023-11-09T11:42:20Z",
      "updatedAt": "2024-05-29T16:04:02Z",
      "closedAt": "2024-05-29T16:04:02Z",
      "comments": []
    },
    {
      "number": 6,
      "id": "I_kwDOKigz-s5_Y37F",
      "title": "Does CertificatePropertyList confer any semantics on its own?",
      "url": "https://github.com/davidben/tls-trust-expressions/issues/6",
      "state": "OPEN",
      "author": "davidben",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "In prototyping some subscriber support, one thing came up: trust-expression-enabled credentials are different from normal credentials:\r\n\r\n* The credentials are expected to be gated on trust expressions, or some other kind of issuer negotiation. (You could imagine also checking the `certificate_authorities` extension, or other mechanisms.)\r\n* Due to this negotiation, the credentials are expected be exact certificate paths, with nothing extra or missing. In particular, this means it should be safe for the subscriber to check against the `signature_algorithms` and `signature_algorithms_cert` without worrying about stray MD2 self-signed roots.\r\n\r\nHowever, CertificatePropertyList is extensible, which is nice because it allows us to introduce other kinds of properties without changing the CA -> server software -> TLS library flow. It's basically a grab-bag of any kind of CA -> server software communication.\r\n\r\nBut this, combined with wanting to minimize how much layers in between need to inspect CertificatePropertyList puts us in a pickle: what does it mean if you get a CertificatePropertyList without any trust expression property? Maybe it's got some other property you don't understand. Does it still imply that it's still issuer-gated and a whole path?\r\n\r\nIf yes, the extensibility is less useful. There may well be use cases that don't want to be issuer-gated.\r\nIf no, we don't want the certificate to accidentally get interpreted as non-issuer-gated when it actually was issuer-gated by some other mechanism.\r\n\r\nIn writing this, I think I'm coming around to \"no\" being the right answer, but then...\r\n* Should the caller be required to call some \"this is an issuer-gated credential\" API? I.e. we use an out-of-band signal rather than relying on in-band signals that might disappear.\r\n* Do we have a general \"this is issuer-gated\" property and say everyone must understand this? That seems a bit weird.\r\n* Do we need to invent critical properties??? \ud83d\ude2d ",
      "createdAt": "2024-02-15T19:01:39Z",
      "updatedAt": "2024-05-29T12:44:50Z",
      "closedAt": null,
      "comments": [
        {
          "author": "bwesterb",
          "authorAssociation": "NONE",
          "body": "What about:\r\n\r\n1. If there is a trust expression property, ignore other properties you don't understand.\r\n2. If there are no properties you understand, ignore the credential.\r\n\r\nNew properties can define different semantics as desired.",
          "createdAt": "2024-02-16T18:12:13Z",
          "updatedAt": "2024-02-16T18:12:13Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "OWNER",
          "body": "What if, say, we moved SCT lists to a certificate property (could be a convenient way for the CA to deliver them and allow the server to negotiate which to send)? If you see only that property, do you ignore the credential?\r\n\r\nBob, Devon, and I talked a bit about this earlier and are currently leaning towards the first of the three options: CPLs are just a bag of data, and it's on the TLS library user to say \"this credential needs to match the issuer\" and \"I believe this credential is ubiquitous and a viable candidate for the default\".\r\n\r\nIt does make the API a bit more annoying, but that does ultimately translate to what probably the application's config file will be: a new directive for \"here are my negotiated certs\". (Or \"here are some ACME URLs to get negotiated certs\".) You need a new one mostly because the existing one has an implicit \"this is ubiquitous\" semantic.",
          "createdAt": "2024-02-17T14:11:55Z",
          "updatedAt": "2024-02-17T14:11:55Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "OWNER",
          "body": "Forgot this was open, but I think we've mostly settled on the interpretation above. https://github.com/davidben/tls-trust-expressions/pull/21 makes this a bit more explicit too in its example. Leaving this open just because we probably do need some text on the implications for the ACME bits.",
          "createdAt": "2024-05-29T12:44:49Z",
          "updatedAt": "2024-05-29T12:44:49Z"
        }
      ]
    },
    {
      "number": 8,
      "id": "I_kwDOKigz-s6A4l7W",
      "title": "Rework introduction after explainer",
      "url": "https://github.com/davidben/tls-trust-expressions/issues/8",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "I wrote the explainer document in part by taking the introduction text and wordsmithing it a bit. I think the version in the explainer is a bit clearer. Let's backport some of those clarity improvements into the draft itself.",
      "createdAt": "2024-03-01T00:26:54Z",
      "updatedAt": "2024-03-04T23:17:39Z",
      "closedAt": "2024-03-04T23:17:38Z",
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "OWNER",
          "body": "This is done.",
          "createdAt": "2024-03-04T23:17:38Z",
          "updatedAt": "2024-03-04T23:17:38Z"
        }
      ]
    },
    {
      "number": 9,
      "id": "I_kwDOKigz-s6BM3vN",
      "title": "Allow CA signatures to be opaque to the subscriber",
      "url": "https://github.com/davidben/tls-trust-expressions/issues/9",
      "state": "OPEN",
      "author": "davidben",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Imagine we have a PKI and would like to transition the roots from one algorithm to another. This could be classical to post-quantum, or perhaps the current round of post-quantum algorithms to a future, more size-efficient one.\r\n\r\nThe subscribers keys will unavoidably require manual work by the subscriber. But everything beyond the subscriber key (what Merkle Tree Certificate's [BikeshedCertificate](https://davidben.github.io/merkle-tree-certs/draft-davidben-tls-merkle-tree-certs.html#name-certificate-format) calls the \"proof\") is purely a matter between the CA and relying party. The subscriber *does not need to process them*. It would be nice if CAs could transparently start issuing you a classical-rooted certificate and a PQ-rooted certificate, and then certificate negotiation automatically takes care of it.\r\n\r\nIn particular, though this doesn't get the EE keys, a world with PQ roots and mixed PQ and classical EE keys is actually still coherent because we have a PQ-secure signal[*] that the site is not yet ready to be PQ-secure. Separating the transitions will be useful. And, of course, when transitioning between PQ-old-and-big vs PQ-new-and-small, the mix is straightforwardly coherent.\r\n\r\nWe *almost* have the pieces of this, except for one problem: X.509 is a bad fit for TLS. TLS uses code points, while X.509 negotiations with (sometimes [comically unusable](https://www.rfc-editor.org/rfc/rfc4055.html)) AlgorithmIdentifiers. A TLS stack cannot map between them without recognizing the signature algorithm. This means CA signatures in X.509, unlike BikeshedCertificate, are *not* opaque to the subscriber. In particular, although very few folks implement it (without trust expressions, there are path-building problems), RFC 8446 technically [requires](https://www.rfc-editor.org/rfc/rfc8446#section-4.4.2.2) the subscriber check this before presenting a certificate.\r\n\r\nWe can fix this by adding a `signature_algorithms` certificate property, that contains the CA-extracted codepoints in TLS syntax. If the property is present, the subscriber's TLS software should check those against the ClientHello in lieu of trying to parse this messy data out of the certificate.\r\n\r\n[*] Well, sort of. The existence of a P-256 certificate does not imply the non-existence of an ML-DSA certificate. We may need a bit more pieces to make that transition state viable.",
      "createdAt": "2024-03-04T19:56:37Z",
      "updatedAt": "2024-03-04T19:56:37Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 10,
      "id": "I_kwDOKigz-s6DFL9f",
      "title": "Remove trustExpressions request boolean",
      "url": "https://github.com/davidben/tls-trust-expressions/issues/10",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "OWNER",
      "assignees": [
        "bob-beck"
      ],
      "labels": [],
      "body": "Per feedback from @aarongable, it's probably better to omit the the trustExpressions boolean for now. It was intended to accommodate some more complex issuance cases, but it's probably better to resolve that in a separate document, since general multiple issuance may require much more complicated ACME bits anyway. Let's start with just the Accept HTTP request header and the MIME type and we can add more extensions later.",
      "createdAt": "2024-03-21T05:46:14Z",
      "updatedAt": "2024-03-22T21:50:57Z",
      "closedAt": "2024-03-22T21:50:57Z",
      "comments": [
        {
          "author": "davidben",
          "authorAssociation": "OWNER",
          "body": "This is now done.",
          "createdAt": "2024-03-22T21:50:57Z",
          "updatedAt": "2024-03-22T21:50:57Z"
        }
      ]
    },
    {
      "number": 12,
      "id": "I_kwDOKigz-s6EuBAN",
      "title": "Decide how to allocate trust store names",
      "url": "https://github.com/davidben/tls-trust-expressions/issues/12",
      "state": "OPEN",
      "author": "davidben",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Merkle Tree certificates will have a similar problem in naming CAs. And honestly even for X.509 certificates, a shorter name would be valuable.\r\n\r\nGoofy as ASN.1 is, we're actually thinking OIDs right now. Specifically OIDs under the [Private Enterprise Number (PEN) arc](https://www.rfc-editor.org/rfc/rfc9371.html), probably represented as a DER-encoded `RELATIVE-OID` contents, excluding the tag and length, relative to the `1.3.6.1.4.1` prefix, avoid an unnecessary 5 bytes.\r\n\r\nThis is nice because:\r\n* Anyone can register them, so there's an easy answer for private PKIs\r\n* They're pretty compact; the largest PEN so far fits in 3 bytes, and then an organization should only need a couple more bytes past that, even if they've already been using their namespace. We're unlikely to ever allocate a 4-byte PEN.\r\n* While not directly useful for this draft, the hierarchical nature might be handy for MTCs, which have a two-layer thing going on\r\n* It seems perhaps handy for MTC CA names and trust stores to not collide. You could potentially use an MTC CA name as an implicit trust store. (Not yet thought through.)",
      "createdAt": "2024-04-04T22:55:37Z",
      "updatedAt": "2024-04-04T22:55:37Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 13,
      "id": "I_kwDOKigz-s6HzX5p",
      "title": "How do trust expressions and sctNotAfter removals work?",
      "url": "https://github.com/davidben/tls-trust-expressions/issues/13",
      "state": "OPEN",
      "author": "davidben",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "I suspect there is a way to express this with the draft as-is, since you just need newly-issued certificates to stop being associated with newer versions of the trust store, but filing this so we remember to think about this.",
      "createdAt": "2024-05-03T20:38:17Z",
      "updatedAt": "2024-05-03T20:38:28Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 17,
      "id": "I_kwDOKigz-s6KDjrS",
      "title": "Write up design considerations section",
      "url": "https://github.com/davidben/tls-trust-expressions/issues/17",
      "state": "OPEN",
      "author": "davidben",
      "authorAssociation": "OWNER",
      "assignees": [
        "devonobrien"
      ],
      "labels": [],
      "body": "We ought to document the design rationale somewhere. Some things we could discuss:\r\n\r\n* All the complications around how we need to handle version skew\r\n* Growth of manifest list over time \r\n* Growth of TrustStoreInclusion metadata overtime",
      "createdAt": "2024-05-24T20:13:56Z",
      "updatedAt": "2024-05-24T20:13:56Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 18,
      "id": "I_kwDOKigz-s6KDt-7",
      "title": "\"SHOULD NOT use path building\" is a bit strong",
      "url": "https://github.com/davidben/tls-trust-expressions/issues/18",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Let's downgrade to MAY and then explain why you might want to. Namely:\r\n* More predictable behavior\r\n* Encourage servers to behave correctly",
      "createdAt": "2024-05-24T20:46:18Z",
      "updatedAt": "2024-05-29T16:03:34Z",
      "closedAt": "2024-05-29T16:03:34Z",
      "comments": []
    },
    {
      "number": 19,
      "id": "I_kwDOKigz-s6KD0kl",
      "title": "Tidy up subscriber selection algorithm",
      "url": "https://github.com/davidben/tls-trust-expressions/issues/19",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "I think we're a bit too prescriptive in the subscriber behavior section:\r\nhttps://davidben.github.io/tls-trust-expressions/draft-davidben-tls-trust-expr.html#name-subscriber-behavior\r\n\r\nSpecifically, it's written as if you first look for a TE-based match, then you consider other stuff like CA. Instead, I think the right model is:\r\n\r\n* Here is how you use TE to get a positive signal of trust anchor match. TE might tell you \"yes, it matches\" or \"unknown\"\r\n* The `certificate_authorities` extension can also give you a similar signal.\r\n* Other extensions might be defined later to similarly handle trust negotiation\r\n* If any such extension says \"yes, it matches\", you have a trust anchor match. Otherwise it's unknown whether the server trusts the path.\r\n\r\nFrom there, the subscriber has free reign to decide how it selects a credential based on this \"trust anchor match\" signal. One possible scheme (but not the only one) is:\r\n\r\n* Subscriber maintains a list of credentials, in preference order, e.g. sorted by size or speed of signing key\r\n* Some credentials require a trust anchor match, presumably the ones at the front of the queue\r\n* Other credentials skip this check because they're fallback credentials, presumably the ones at the end of the queue\r\n* Pick the first credential that matches",
      "createdAt": "2024-05-24T21:05:20Z",
      "updatedAt": "2024-05-30T17:29:18Z",
      "closedAt": "2024-05-30T17:29:18Z",
      "comments": [
        {
          "author": "martinschmatz",
          "authorAssociation": "NONE",
          "body": "Just FYI: I was playing around with the idea to pack the information intended to be transported in the proposed new `trust_expressions` extension in \"fake\" root certs which can be sent to the subscriber using the _existing_ `certificate_authorities` extension \"which SHOULD be used by the receiving endpoint to guide certificate selection\" as per [RFC](https://datatracker.ietf.org/doc/html/rfc8446#section-4.2.4) (read: The server is free how to use the information). \r\n\r\nIt is easy to create a self signed \"root cert\" with some base64 encoded information in CN etc fields to help the subscriber in the selection of the certificate chain to use for authentication. ",
          "createdAt": "2024-05-29T12:23:18Z",
          "updatedAt": "2024-05-29T12:23:18Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "OWNER",
          "body": "Hi @martinschmatz, thanks for the comment. As this has nothing to do with this issue, I've filed https://github.com/davidben/tls-trust-expressions/issues/23 so we can move the discussion there.",
          "createdAt": "2024-05-29T12:39:45Z",
          "updatedAt": "2024-05-29T12:39:45Z"
        },
        {
          "author": "martinschmatz",
          "authorAssociation": "NONE",
          "body": "Sure @davidben - I added it here because it might be that the first two bullets above could merge, thereby avoiding the hassle to convince people to change the TLSv1.3 RFC. \r\n\r\nJoining #23 ",
          "createdAt": "2024-05-29T13:02:41Z",
          "updatedAt": "2024-05-29T13:02:41Z"
        }
      ]
    },
    {
      "number": 23,
      "id": "I_kwDOKigz-s6KeZWJ",
      "title": "Packing trust_expressions into certificate_authorities",
      "url": "https://github.com/davidben/tls-trust-expressions/issues/23",
      "state": "OPEN",
      "author": "davidben",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "@martinschmatz wrote the following on https://github.com/davidben/tls-trust-expressions/issues/19#issuecomment-2137282741\r\n\r\n> Just FYI: I was playing around with the idea to pack the information intended to be transported in the proposed new `trust_expressions` extension in \"fake\" root certs which can be sent to the subscriber using the _existing_ `certificate_authorities` extension \"which SHOULD be used by the receiving endpoint to guide certificate selection\" as per [RFC](https://datatracker.ietf.org/doc/html/rfc8446#section-4.2.4) (read: The server is free how to use the information). \r\n>\r\n> It is easy to create a self signed \"root cert\" with some base64 encoded information in CN etc fields to help the subscriber in the selection of the certificate chain to use for authentication. \r\n\r\nMoving this to a separate issue as issue #19 is about something completely unrelated.\r\n\r\n@martinschmatz, could you perhaps expand on this? I don't see what benefit it would have, but some of the details don't make sense to me, so perhaps I am misunderstanding.\r\n\r\nFirst, the `certificate_authorities` extension doesn't carry certificates but names. So there wouldn't be a root certificate in the first place. Base64 encoding also sounds like unnecessarily wasteful (keep in mind we want a compact scheme), though one could use a new OCTET-STRING-carrying attribute. That would still be wasteful with the rest of the ASN.1 structure, but much less so.\r\n\r\nSecond, even though RFC 8446 does not prescribe a precise way to use the information, no one implements a trust expressions matching algorithm with it today. They'll all do some variation of checking for a matching issuer among the relying party's list, because those are the semantics of the field. The allowance is because there are lots of ways to do that and integrate it with other processes.\r\n\r\nIf we were to imbue an existing field with new semantics, we're going to need a code change in the TLS stack anyway. (And, to reduce server operator burden, I think it's important that the matching algorithm be in the TLS stack, at least long-term.) At that point, there is no cost to using a new extension, so we may as well define an extension with the right semantics.\r\n\r\nFinally, there is a real cost to jamming new semantics into existing fields. In addition to the wasteful encoding, this risks weird behaviors when existing software interprets the field according to its existing semantics.",
      "createdAt": "2024-05-29T12:39:09Z",
      "updatedAt": "2024-05-29T16:32:36Z",
      "closedAt": null,
      "comments": [
        {
          "author": "martinschmatz",
          "authorAssociation": "NONE",
          "body": "While I value your effort towards better [crypto-]agility, I'm concerned that it'll take many years for those features to reach OS dist packages. I most certainly support your view that a server should have several cert chains available and adaptively select one pending information received by the client during TLS handshake. \r\n\r\nI therefore played around with a [much] simpler approach by sneaking information into the `certificate_authorities` extension. This explicitly not with the desire to increase agility, but to nevertheless help in the selection of the several available cert chains.\r\n\r\nAs a super simplified example, let's assume a \"fake\" root cert is built like this: \r\n```\r\nSIGALG_default=prime256v1\r\nopenssl ecparam -genkey \\\r\n                -name $SIGALG_default \\\r\n                -noout \\\r\n                -out CA_default.key \\\r\n&& \\\r\nopenssl req \\\r\n                -config /etc/pki/tls/openssl.cnf \\\r\n                -key CA_default.key \\\r\n                -subj '/ST=I want purely QSC cert chain/L=Please use Germany as geo/CN=I want sec level 5' \\\r\n                -new \\\r\n                -x509 \\\r\n                -days 7300 \\\r\n                -extensions v3_ca \\\r\n                -out CA_default.crt\r\n```\r\n\r\nThe `-subj` line is the place where cert-chain-selection-hints are added. As you can see, I expect a reasonably small, highly pragmatic set of selection parameters\r\n- Legacy, QSC, Hybrid sigalgs\r\n- The geo will give a good hint about mandated algs \r\n- The security level is key for interactions with gov\r\n- Potentially some very few more \r\n\r\nFew comments to the above: \r\n- 'cost' is small: The above adds 110 Bytes to a `ClientHello` in the `certificate_authorities` extension and can be further reduced quite a bit by anyway preferred \"code points\" (`-subj '/ST=0x2345/L=Ox4444/CN=0x0005'` adds 57 bytes only) \r\n- Per request specification of `signature_algorithms` extension can not be expected to be easily supported by the gazillion of client apps, while a general description of what the client expects will not necessarily change between requests.\r\n- Implicitly, I'm expecting a gradual, but at least initially slow growth of CAs to support Q-safe root certs. Clients will then have two cert bundles, one legacy and one Q-safe. And it'll be the clients responsibility to have the 'usual suspects' CA for the features the client is asking in its cert bundle.\r\n- Yes, servers must implement code changes, but the clients not. \r\n\r\nAs for the specific use of \"fake root certs\" for the `certificate_authorities` extension in the TE context: In the mean time, I have the suspicion that the entries in your `trust_expressions` extensions might quite likely exceed (?) the max number of characters for the x509 fields transported via `certificate_authorities` extension. It would therefore not be a valid option for TE. \r\n",
          "createdAt": "2024-05-29T16:31:37Z",
          "updatedAt": "2024-05-29T16:32:36Z"
        }
      ]
    },
    {
      "number": 25,
      "id": "I_kwDOKigz-s6Kp5ZT",
      "title": "A server supporting trust expressions needs to have accurate time. ",
      "url": "https://github.com/davidben/tls-trust-expressions/issues/25",
      "state": "OPEN",
      "author": "bob-beck",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "While possibly not an unusual requirement in 2024, Today, a server serving a certificate does not need to know the time, the only time that matters is the client's notion of time to evaluate the validity of the certificate. \r\n\r\nWe need to call out that (in absence of other things) the server's time causing trust expresions to not choose a certificate it believes is expired could result in the default certificate being sent to a client that would otherwise have been presented with an expired certificate, and be allowed to possibly decide based on it's own notion of time that it was fine, (or that it did not care)\r\n\r\nI *think* this change is kind of \"ok\" but it is certainly a change compared to today. \r\n\r\n",
      "createdAt": "2024-05-30T17:48:50Z",
      "updatedAt": "2024-05-30T17:48:50Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 26,
      "id": "I_kwDOKigz-s6Kp9m5",
      "title": "A client does not get a chance to evaluate a non-matching certificate of a trust expression. ",
      "url": "https://github.com/davidben/tls-trust-expressions/issues/26",
      "state": "OPEN",
      "author": "bob-beck",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "\r\nHow important this is we are unsure, but if a client sending a trust expression sends a non matching trust expression that\r\nthe server does not choose (because for example, the server has a distrusted root, time, etc) The client does not then get\r\nto look at what the server would have sent, but instead sees the (possibly very legacy) fallback certificate. \r\n\r\nAs an example, we could have a client that trusts entirely a new set of roots (PQ?) and then instead of being offered a choice\r\nof an \"older less trusted or expired\" PQ cert that it might choose to work with, It instead gets a fallback certifiate with classical algorithms it does not even support. \r\n\r\n",
      "createdAt": "2024-05-30T18:00:37Z",
      "updatedAt": "2024-05-30T18:00:37Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 28,
      "id": "I_kwDOKigz-s6L4uGB",
      "title": "Single-certificate and multi-certificate terms are a bit confusing",
      "url": "https://github.com/davidben/tls-trust-expressions/issues/28",
      "state": "OPEN",
      "author": "davidben",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Without trust anchor negotiation, people sometimes do deploy multiple certificates today. It's not enough to avoid preventing PKI evolution, but it means the terminology is a little bit confusing.",
      "createdAt": "2024-06-11T17:06:14Z",
      "updatedAt": "2024-06-11T17:06:14Z",
      "closedAt": null,
      "comments": []
    }
  ],
  "pulls": [
    {
      "number": 2,
      "id": "PR_kwDOKigz-s5dapOK",
      "title": "Slightly tweak the intro",
      "url": "https://github.com/davidben/tls-trust-expressions/pull/2",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Rereading it, that sentence was a little long and hard to parse. Also the third bullet is kinda redundant with it, so remove it. That also cleans things up because we talk about costs to CAs, subscribers, and RPs, and then have one bullet for each in order.",
      "createdAt": "2023-10-20T19:46:17Z",
      "updatedAt": "2023-10-21T02:07:31Z",
      "baseRepository": "davidben/tls-trust-expressions",
      "baseRefName": "main",
      "baseRefOid": "bcf0fea1e62016c8e1dd4a981fa1a52db2b36a42",
      "headRepository": "davidben/tls-trust-expressions",
      "headRefName": "intro-tweak",
      "headRefOid": "f5726eb7b712a70bda58e0677790b198c98bf4b0",
      "closedAt": "2023-10-20T23:26:37Z",
      "mergedAt": "2023-10-20T23:26:37Z",
      "mergedBy": "davidben",
      "mergeCommit": {
        "oid": "0c61ee50d9ee04897ab093ef27ffa43be9827ee0"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKigz-s5kyVR6",
          "commit": {
            "abbreviatedOid": "f5726eb"
          },
          "author": "devonobrien",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-20T21:21:12Z",
          "updatedAt": "2023-10-20T21:21:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 5,
      "id": "PR_kwDOKigz-s5lAEZA",
      "title": "Rework the privacy considerations section",
      "url": "https://github.com/davidben/tls-trust-expressions/pull/5",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "OWNER",
      "assignees": [
        "bob-beck"
      ],
      "labels": [],
      "body": "",
      "createdAt": "2024-01-24T21:53:12Z",
      "updatedAt": "2024-01-25T17:17:05Z",
      "baseRepository": "davidben/tls-trust-expressions",
      "baseRefName": "main",
      "baseRefOid": "a00613b25482bd0d7a3ab418fe8bf9f38691559e",
      "headRepository": "davidben/tls-trust-expressions",
      "headRefName": "privacy-considerations",
      "headRefOid": "87ac048c5aa7d001c1585ab44440e62685d0ca99",
      "closedAt": "2024-01-25T17:17:00Z",
      "mergedAt": "2024-01-25T17:17:00Z",
      "mergedBy": "davidben",
      "mergeCommit": {
        "oid": "e7dcbf6c5d3d70636ecf9507c94a1f61b2b3869b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKigz-s5t7Uqv",
          "commit": {
            "abbreviatedOid": "87ac048"
          },
          "author": "bob-beck",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-01-25T17:16:34Z",
          "updatedAt": "2024-01-25T17:16:34Z",
          "comments": []
        }
      ]
    },
    {
      "number": 7,
      "id": "PR_kwDOKigz-s5oVShz",
      "title": "Add an informal explainer document",
      "url": "https://github.com/davidben/tls-trust-expressions/pull/7",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-02-29T19:39:51Z",
      "updatedAt": "2024-02-29T23:44:13Z",
      "baseRepository": "davidben/tls-trust-expressions",
      "baseRefName": "main",
      "baseRefOid": "11cb5c005a38586963db5eb75f319877adc2ec07",
      "headRepository": "davidben/tls-trust-expressions",
      "headRefName": "explainer",
      "headRefOid": "c964ac14a6337efc8080a07230a8d0ad43411fac",
      "closedAt": "2024-02-29T23:44:11Z",
      "mergedAt": "2024-02-29T23:44:11Z",
      "mergedBy": "davidben",
      "mergeCommit": {
        "oid": "3c9df037f7e5aa1b58a555c3998356364b2cea07"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKigz-s5x1Uwm",
          "commit": {
            "abbreviatedOid": "a0ba6a2"
          },
          "author": "dadrian",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-29T20:24:26Z",
          "updatedAt": "2024-02-29T20:24:26Z",
          "comments": []
        }
      ]
    },
    {
      "number": 11,
      "id": "PR_kwDOKigz-s5qcjwg",
      "title": "Remove the trustExpressions extension flag for ACME.",
      "url": "https://github.com/davidben/tls-trust-expressions/pull/11",
      "state": "MERGED",
      "author": "bob-beck",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This has always been an optimization, not a requirement for this to work. Some discussions with CA operators indicate this is probably unnecessary and we can remove it for now.",
      "createdAt": "2024-03-22T05:03:26Z",
      "updatedAt": "2024-03-22T21:50:38Z",
      "baseRepository": "davidben/tls-trust-expressions",
      "baseRefName": "main",
      "baseRefOid": "abd930a6a0f9961398127ef04c47d3696486f2e8",
      "headRepository": "bob-beck/tls-trust-expressions",
      "headRefName": "main",
      "headRefOid": "e974e4cbb2e1f40ccf623f28028cf4fb58c1e336",
      "closedAt": "2024-03-22T21:50:38Z",
      "mergedAt": "2024-03-22T21:50:38Z",
      "mergedBy": "davidben",
      "mergeCommit": {
        "oid": "5e02af81a8fb58c90064794f0682a8154cafdd87"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKigz-s50fN9G",
          "commit": {
            "abbreviatedOid": "582e853"
          },
          "author": "davidben",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-22T09:31:51Z",
          "updatedAt": "2024-03-22T09:31:51Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "We can delete this section heading too.",
              "createdAt": "2024-03-22T09:31:51Z",
              "updatedAt": "2024-03-22T09:31:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKigz-s50fOB5",
          "commit": {
            "abbreviatedOid": "582e853"
          },
          "author": "davidben",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "LGTM!",
          "createdAt": "2024-03-22T09:32:00Z",
          "updatedAt": "2024-03-22T09:32:00Z",
          "comments": []
        }
      ]
    },
    {
      "number": 14,
      "id": "PR_kwDOKigz-s5vcRlU",
      "title": "Add a brief discussion about using DNS names to the explainer",
      "url": "https://github.com/davidben/tls-trust-expressions/pull/14",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-05-14T19:12:50Z",
      "updatedAt": "2024-05-14T19:52:07Z",
      "baseRepository": "davidben/tls-trust-expressions",
      "baseRefName": "main",
      "baseRefOid": "5e02af81a8fb58c90064794f0682a8154cafdd87",
      "headRepository": "davidben/tls-trust-expressions",
      "headRefName": "explainer-dns",
      "headRefOid": "484b35167f6945c287b7781d82a835761a729ab5",
      "closedAt": "2024-05-14T19:52:04Z",
      "mergedAt": "2024-05-14T19:52:04Z",
      "mergedBy": "davidben",
      "mergeCommit": {
        "oid": "6038f10f4fa16dd9c1fad1b92eeee71a4ff4f489"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKigz-s56kEGQ",
          "commit": {
            "abbreviatedOid": "484b351"
          },
          "author": "devonobrien",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-05-14T19:50:49Z",
          "updatedAt": "2024-05-14T19:50:49Z",
          "comments": []
        }
      ]
    },
    {
      "number": 15,
      "id": "PR_kwDOKigz-s5wAn1a",
      "title": "Add a couple more sections to the explainer",
      "url": "https://github.com/davidben/tls-trust-expressions/pull/15",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-05-20T22:44:26Z",
      "updatedAt": "2024-05-21T22:03:19Z",
      "baseRepository": "davidben/tls-trust-expressions",
      "baseRefName": "main",
      "baseRefOid": "6038f10f4fa16dd9c1fad1b92eeee71a4ff4f489",
      "headRepository": "davidben/tls-trust-expressions",
      "headRefName": "explainer-updates",
      "headRefOid": "44398262575ef30d08a66155e5c1717de062e08d",
      "closedAt": "2024-05-21T22:03:16Z",
      "mergedAt": "2024-05-21T22:03:16Z",
      "mergedBy": "davidben",
      "mergeCommit": {
        "oid": "3837d23bd8d0d6d50b78fdde218d8deb5c6ba03e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKigz-s57Noew",
          "commit": {
            "abbreviatedOid": "4439826"
          },
          "author": "devonobrien",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-20T22:57:19Z",
          "updatedAt": "2024-05-20T22:57:32Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "It might be helpful to slightly expand on this point with something to the effect of:\r\n\r\nWebsites that need to function in both CT-enforcing and non-CT-enforcing user agents are required to include several additional SCT signatures with their certificates, regardless of whether they were needed. With the significant leap in size from ECDSA to current PQC algorithms, this becomes a significant challenge that some user agents may opt to require SCT omission, rather than tacitly ignoring them.",
              "createdAt": "2024-05-20T22:57:19Z",
              "updatedAt": "2024-05-20T22:57:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKigz-s57WeBL",
          "commit": {
            "abbreviatedOid": "4439826"
          },
          "author": "davidben",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-21T19:41:01Z",
          "updatedAt": "2024-05-21T19:41:01Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "Hmm. I guess I was viewing this as a brief illustration of how they diverge today (beyond the obvious one of slightly different trusted CAs), with the impact to PQC the next paragraph. Talking about this here doesn't quite flow, but maybe there's another way to organize it?\r\n\r\nThe cost of sending stuff that only some clients care about is roughly covered in the section about cross-signing, though I think that needs a bit more text. SCTs are also an example of this, but maybe less directly to the point since we haven't really discussed CT in the context of trust expressions much yet.\r\n\r\nCould also just delete this paragraph if it's mostly confusing.",
              "createdAt": "2024-05-21T19:41:01Z",
              "updatedAt": "2024-05-21T19:41:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKigz-s57XPTp",
          "commit": {
            "abbreviatedOid": "4439826"
          },
          "author": "devonobrien",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-21T21:48:49Z",
          "updatedAt": "2024-05-21T21:48:49Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "Yeah, that's fair about it being better suited in another section, but I think it's worth expanding upon somewhere, especially in light of PQC sig sizes adding the risk that relying parties would overlook their presence as they do today. I'm good with the changes.",
              "createdAt": "2024-05-21T21:48:49Z",
              "updatedAt": "2024-05-21T21:48:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKigz-s57XPoE",
          "commit": {
            "abbreviatedOid": "4439826"
          },
          "author": "devonobrien",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-05-21T21:50:02Z",
          "updatedAt": "2024-05-21T21:50:02Z",
          "comments": []
        }
      ]
    },
    {
      "number": 16,
      "id": "PR_kwDOKigz-s5wZz5r",
      "title": "Discuss the implications of serving certificates from some CA",
      "url": "https://github.com/davidben/tls-trust-expressions/pull/16",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "From IETF discussion, it seems there is some confusion about the nature of PKI-based authentication, the implications of serving a correct certificate from an untrustworthy CA, and the roles and goals of subscribers and relying parties in this interaction. There also appears to be some concern of actors using this kind of confusion to convince confused root program operators of inadvisable actions, as well as some discussion amplifying this confusion.\r\n\r\nSpell this out in Security Considerations, in hopes of reducing all this confusion.\r\n\r\nAlso spell out how agility reduces what would otherwise be a strong compatibility vs security conflict. This implication seems to also have been non-obvious to folks.",
      "createdAt": "2024-05-24T03:26:26Z",
      "updatedAt": "2024-05-24T15:39:37Z",
      "baseRepository": "davidben/tls-trust-expressions",
      "baseRefName": "main",
      "baseRefOid": "3837d23bd8d0d6d50b78fdde218d8deb5c6ba03e",
      "headRepository": "davidben/tls-trust-expressions",
      "headRefName": "pki-roles",
      "headRefOid": "c213d203b457b28d7045297d74cde00a738c3330",
      "closedAt": "2024-05-24T15:39:34Z",
      "mergedAt": "2024-05-24T15:39:34Z",
      "mergedBy": "davidben",
      "mergeCommit": {
        "oid": "b3d7b31a968b739ab15bb8e809106d46d083600d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKigz-s570J-_",
          "commit": {
            "abbreviatedOid": "c213d20"
          },
          "author": "bob-beck",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-05-24T15:38:19Z",
          "updatedAt": "2024-05-24T15:38:19Z",
          "comments": []
        }
      ]
    },
    {
      "number": 20,
      "id": "PR_kwDOKigz-s5wg6Fk",
      "title": "Soften the SHOULD for disabling path building in the RP",
      "url": "https://github.com/davidben/tls-trust-expressions/pull/20",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Closes #18.",
      "createdAt": "2024-05-24T21:54:40Z",
      "updatedAt": "2024-05-29T16:03:36Z",
      "baseRepository": "davidben/tls-trust-expressions",
      "baseRefName": "main",
      "baseRefOid": "b3d7b31a968b739ab15bb8e809106d46d083600d",
      "headRepository": "davidben/tls-trust-expressions",
      "headRefName": "path-building-should-may",
      "headRefOid": "e56f3c4aa353c0b7cbcbe5f192a1349c17fcca88",
      "closedAt": "2024-05-29T16:03:33Z",
      "mergedAt": "2024-05-29T16:03:33Z",
      "mergedBy": "davidben",
      "mergeCommit": {
        "oid": "315dcb3998a901cfcb2e47a341064dc5bcd243fb"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKigz-s58Uttf",
          "commit": {
            "abbreviatedOid": "e56f3c4"
          },
          "author": "bob-beck",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-05-29T15:50:34Z",
          "updatedAt": "2024-05-29T15:50:34Z",
          "comments": []
        }
      ]
    },
    {
      "number": 21,
      "id": "PR_kwDOKigz-s5wy3Pz",
      "title": "Rewrite subscriber behavior sections",
      "url": "https://github.com/davidben/tls-trust-expressions/pull/21",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Fixes #19. The changes made here are:\r\n\r\n1. Don't prescribe an exact selection algorithm. Only prescribe the matching procedure.\r\n\r\n2. Move the expiry check into the matching procedure, because it's part of the process. (Version skew depends on this.)\r\n\r\n3. Although we don't prescribe it, give an example selection algorithm that also incorporates certificate_authorities, in response to feedback. This example is also structured differently, because it more closely aligns with how we anticipate implementing it.",
      "createdAt": "2024-05-28T17:48:51Z",
      "updatedAt": "2024-05-30T18:02:17Z",
      "baseRepository": "davidben/tls-trust-expressions",
      "baseRefName": "main",
      "baseRefOid": "b3d7b31a968b739ab15bb8e809106d46d083600d",
      "headRepository": "davidben/tls-trust-expressions",
      "headRefName": "selection-algorithm",
      "headRefOid": "717ae7b9ade420e00c6950134b97ed0ff65a6ef6",
      "closedAt": "2024-05-30T17:29:17Z",
      "mergedAt": "2024-05-30T17:29:17Z",
      "mergedBy": "davidben",
      "mergeCommit": {
        "oid": "a6949a24b24679dafcc848c7aef2400fcc036126"
      },
      "comments": [
        {
          "author": "bob-beck",
          "authorAssociation": "COLLABORATOR",
          "body": "https://github.com/davidben/tls-trust-expressions/issues/25\r\nand\r\nhttps://github.com/davidben/tls-trust-expressions/issues/26\r\nfell out of this.\r\n",
          "createdAt": "2024-05-30T18:02:16Z",
          "updatedAt": "2024-05-30T18:02:16Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKigz-s58Ummy",
          "commit": {
            "abbreviatedOid": "717ae7b"
          },
          "author": "bob-beck",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2024-05-29T15:38:33Z",
          "updatedAt": "2024-05-29T15:43:14Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "I don't think we want to do this here.  If for (reasons) my certificates have expired, today, I still serve up the expired certificate rather than effectively, failing. It is then up to the relying party to decide what to do with an expired certificate and this changes that dynamic. \r\n\r\nI think an expired path is *still* a match.  If there is *more than one* match and one is expired and one is not, then absolutely, choose the non-expired one to serve. ",
              "createdAt": "2024-05-29T15:38:33Z",
              "updatedAt": "2024-05-29T15:43:15Z"
            },
            {
              "originalPosition": 11,
              "body": "Consider a future PQ world with PQ clients, and a default classical cert - it's worse behaviour to serve up the classical cert because the PQ cert  that matched the expression was expired, than to just serve up the expired cert we know matches because it's the best we have. ",
              "createdAt": "2024-05-29T15:41:46Z",
              "updatedAt": "2024-05-29T15:43:15Z"
            },
            {
              "originalPosition": 44,
              "body": "I think here is the place to be opinionated over serving non-expired and smallest size paths first. ",
              "createdAt": "2024-05-29T15:43:06Z",
              "updatedAt": "2024-05-29T15:43:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKigz-s58VG6v",
          "commit": {
            "abbreviatedOid": "717ae7b"
          },
          "author": "davidben",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-29T16:35:22Z",
          "updatedAt": "2024-05-29T16:35:23Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "The problem is that, if expired, all the version skew machinery we've put in no longer works. The relying party only needs to send `excluded_labels` up to when the old certificates expire. If we say that expired certificates may match, then the relying party can never retire `excluded_labels` and then removals leave persistent scar tissue.",
              "createdAt": "2024-05-29T16:35:22Z",
              "updatedAt": "2024-05-29T16:35:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKigz-s58Vco6",
          "commit": {
            "abbreviatedOid": "717ae7b"
          },
          "author": "bob-beck",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-29T17:19:21Z",
          "updatedAt": "2024-05-29T17:19:21Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "although I suspect that may come down to picking the newer of the smallest... ",
              "createdAt": "2024-05-29T17:19:21Z",
              "updatedAt": "2024-05-29T17:19:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKigz-s58gUyu",
          "commit": {
            "abbreviatedOid": "717ae7b"
          },
          "author": "bob-beck",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-30T16:51:25Z",
          "updatedAt": "2024-05-30T16:51:25Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "After conversation offline, I'm maybe kinda ok with this, as long as we call out the new dependency on the server having accurate time, which I think we need to note, as well as the differences here that we would noa serve the default cert in this case instead of the expired one in some situations. ",
              "createdAt": "2024-05-30T16:51:25Z",
              "updatedAt": "2024-05-30T16:51:25Z"
            }
          ]
        }
      ]
    },
    {
      "number": 22,
      "id": "PR_kwDOKigz-s5wziv2",
      "title": "Clarify that the bad certificates may come in the future too",
      "url": "https://github.com/davidben/tls-trust-expressions/pull/22",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-05-28T19:56:31Z",
      "updatedAt": "2024-05-29T16:04:15Z",
      "baseRepository": "davidben/tls-trust-expressions",
      "baseRefName": "main",
      "baseRefOid": "b3d7b31a968b739ab15bb8e809106d46d083600d",
      "headRepository": "davidben/tls-trust-expressions",
      "headRefName": "also-future-signing",
      "headRefOid": "66bddbce24cf6f060498d93a3f9a959caec620e5",
      "closedAt": "2024-05-29T16:04:12Z",
      "mergedAt": "2024-05-29T16:04:12Z",
      "mergedBy": "davidben",
      "mergeCommit": {
        "oid": "80147015906458dfb7d10980d1a1141ac31e1b6a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKigz-s58Uj9n",
          "commit": {
            "abbreviatedOid": "66bddbc"
          },
          "author": "bob-beck",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-05-29T15:33:51Z",
          "updatedAt": "2024-05-29T15:33:51Z",
          "comments": []
        }
      ]
    },
    {
      "number": 24,
      "id": "PR_kwDOKigz-s5w4aZh",
      "title": "Say this is for TLS 1.3 or later",
      "url": "https://github.com/davidben/tls-trust-expressions/pull/24",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Closes #4",
      "createdAt": "2024-05-29T12:48:08Z",
      "updatedAt": "2024-05-29T16:04:04Z",
      "baseRepository": "davidben/tls-trust-expressions",
      "baseRefName": "main",
      "baseRefOid": "b3d7b31a968b739ab15bb8e809106d46d083600d",
      "headRepository": "davidben/tls-trust-expressions",
      "headRefName": "tls13",
      "headRefOid": "fb05ddd54b443071681e761c108de05c0076ffd9",
      "closedAt": "2024-05-29T16:04:01Z",
      "mergedAt": "2024-05-29T16:04:01Z",
      "mergedBy": "davidben",
      "mergeCommit": {
        "oid": "17e316cc387c2ccfc5844ec68676cf7e89f9c9d7"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKigz-s58Ujl4",
          "commit": {
            "abbreviatedOid": "fb05ddd"
          },
          "author": "bob-beck",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-05-29T15:33:12Z",
          "updatedAt": "2024-05-29T15:33:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 27,
      "id": "PR_kwDOKigz-s5xEU2Q",
      "title": "Add explainer sections for server software and cert provisioning changes we expect. ",
      "url": "https://github.com/davidben/tls-trust-expressions/pull/27",
      "state": "MERGED",
      "author": "bob-beck",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-05-30T23:45:58Z",
      "updatedAt": "2024-06-06T21:37:12Z",
      "baseRepository": "davidben/tls-trust-expressions",
      "baseRefName": "main",
      "baseRefOid": "a6949a24b24679dafcc848c7aef2400fcc036126",
      "headRepository": "bob-beck/tls-trust-expressions",
      "headRefName": "main",
      "headRefOid": "b12e05dbbbf46cd922dd831e2a0e0575f64f4399",
      "closedAt": "2024-06-06T21:37:12Z",
      "mergedAt": "2024-06-06T21:37:11Z",
      "mergedBy": "bob-beck",
      "mergeCommit": {
        "oid": "04d8bcc23638aa8603d4aedb18eb160d449ac2f8"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKigz-s58q2ML",
          "commit": {
            "abbreviatedOid": "34fb123"
          },
          "author": "davidben",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-31T19:46:44Z",
          "updatedAt": "2024-05-31T19:46:44Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Nit, just to match the casing of the other sections.\r\n```suggestion\r\n## Server Software Changes\r\n```",
              "createdAt": "2024-05-31T19:46:44Z",
              "updatedAt": "2024-05-31T19:46:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKigz-s58q2Xp",
          "commit": {
            "abbreviatedOid": "34fb123"
          },
          "author": "davidben",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "LGTM, although I'm a little confused why GitHub seems to think a bunch of other commits are part of your PR. Wonder if you need to rebase or something?",
          "createdAt": "2024-05-31T19:47:14Z",
          "updatedAt": "2024-05-31T19:47:14Z",
          "comments": []
        }
      ]
    },
    {
      "number": 29,
      "id": "PR_kwDOKigz-s5yJ0Jw",
      "title": "Add a discussion of server operator burden to the explainer",
      "url": "https://github.com/davidben/tls-trust-expressions/pull/29",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "OWNER",
      "assignees": [
        "devonobrien",
        "bob-beck"
      ],
      "labels": [],
      "body": "Possibly some of this should graduate to the draft too.",
      "createdAt": "2024-06-11T19:59:25Z",
      "updatedAt": "2024-06-17T19:07:08Z",
      "baseRepository": "davidben/tls-trust-expressions",
      "baseRefName": "main",
      "baseRefOid": "04d8bcc23638aa8603d4aedb18eb160d449ac2f8",
      "headRepository": "davidben/tls-trust-expressions",
      "headRefName": "server-operator-burden",
      "headRefOid": "bd10f57d5c66b36820bed5293a74d6096363dc71",
      "closedAt": "2024-06-17T19:07:05Z",
      "mergedAt": "2024-06-17T19:07:05Z",
      "mergedBy": "davidben",
      "mergeCommit": {
        "oid": "0c2822ebaa411ed32e2266b41265455b2009b47c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKigz-s59_Uny",
          "commit": {
            "abbreviatedOid": "8d0a316"
          },
          "author": "devonobrien",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2024-06-12T18:06:40Z",
          "updatedAt": "2024-06-12T18:13:16Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Since we're not spending much time on this topic, I think we should also point out the technical limitations. Fingerprinting is relatively unreliable because it's an inferred signal and collecting intermediates requires constant curation to remain relevant. Maybe something like:\r\n\"they are impractical for a more diverse set of HTTPS servers and are limited in both the types of signals available and the reliability of those signals.\"\r\n",
              "createdAt": "2024-06-12T18:06:40Z",
              "updatedAt": "2024-06-12T18:13:16Z"
            },
            {
              "originalPosition": 36,
              "body": "Possibly \"shift work from server operators to CAs and root programs\" to make the shift more explicit",
              "createdAt": "2024-06-12T18:08:42Z",
              "updatedAt": "2024-06-12T18:13:16Z"
            },
            {
              "originalPosition": 45,
              "body": "What does certificate profile mean here? In PKI terms, this usually refers to the issuance template for a given certificate, but I think this is referring to changes in trust for a given certificate?",
              "createdAt": "2024-06-12T18:11:52Z",
              "updatedAt": "2024-06-12T18:13:16Z"
            },
            {
              "originalPosition": 42,
              "body": "This last point is worth including, but the text leans further into a narrow example than I would have expected from the title. Is there a broader point here we can focus on? I don't have a strong suggestion here, but there seems to be an opportunity to make a stronger point here.",
              "createdAt": "2024-06-12T18:12:46Z",
              "updatedAt": "2024-06-12T18:13:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKigz-s5-LCww",
          "commit": {
            "abbreviatedOid": "8d0a316"
          },
          "author": "davidben",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-13T20:16:16Z",
          "updatedAt": "2024-06-13T21:12:26Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "We do spend time on the topic, just elsewhere in the document. I can add a \"see elsewhere\" sentence.",
              "createdAt": "2024-06-13T20:16:16Z",
              "updatedAt": "2024-06-13T21:12:27Z"
            },
            {
              "originalPosition": 45,
              "body": "This is talking about server operators (\"from the server operator's perspective\"), so it refers to a change to the kind of certificates they serve. I don't want to say a change in the exact certificates, because that happens routinely. Rephrased to avoid the phrase.",
              "createdAt": "2024-06-13T20:16:46Z",
              "updatedAt": "2024-06-13T21:12:27Z"
            },
            {
              "originalPosition": 36,
              "body": "Done.",
              "createdAt": "2024-06-13T20:16:57Z",
              "updatedAt": "2024-06-13T21:12:27Z"
            },
            {
              "originalPosition": 42,
              "body": "I tried to generalize this but honestly it made it even harder to follow. This already tells a pretty general story; any time server operators are required to make some change, we should reduce any unnecessary risks that they have to take on. But I think it's important to talk about compromised CA as the motivating example because that's what makes it about incident response.\r\n\r\nRephrased it a bit to make it clear the CA compromise is just an example.",
              "createdAt": "2024-06-13T20:23:33Z",
              "updatedAt": "2024-06-13T21:12:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKigz-s5-lQ7O",
          "commit": {
            "abbreviatedOid": "bd10f57"
          },
          "author": "devonobrien",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "The changes LGTM. Thanks for the tweaks.",
          "createdAt": "2024-06-17T19:01:34Z",
          "updatedAt": "2024-06-17T19:01:34Z",
          "comments": []
        }
      ]
    },
    {
      "number": 30,
      "id": "PR_kwDOKigz-s5yboQk",
      "title": "Use PENs to allocate trust store names",
      "url": "https://github.com/davidben/tls-trust-expressions/pull/30",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "OWNER",
      "assignees": [
        "devonobrien",
        "bob-beck"
      ],
      "labels": [],
      "body": "This gives a concrete allocation scheme, is compact, and also aligns well with some plans we have around Merkle Tree Certificates.",
      "createdAt": "2024-06-14T03:35:45Z",
      "updatedAt": "2024-06-14T18:01:51Z",
      "baseRepository": "davidben/tls-trust-expressions",
      "baseRefName": "main",
      "baseRefOid": "04d8bcc23638aa8603d4aedb18eb160d449ac2f8",
      "headRepository": "davidben/tls-trust-expressions",
      "headRefName": "oid",
      "headRefOid": "8d04679c4194afcd34a8ad5d8919b11d9cfd6c1b",
      "closedAt": "2024-06-14T18:01:45Z",
      "mergedAt": "2024-06-14T18:01:45Z",
      "mergedBy": "davidben",
      "mergeCommit": {
        "oid": "d20509e10cec37724981594c38725ab61957eaa4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKigz-s5-Sadl",
          "commit": {
            "abbreviatedOid": "8d04679"
          },
          "author": "bob-beck",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-14T16:20:31Z",
          "updatedAt": "2024-06-14T16:20:32Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "in text form as desribed in {{trust-store-ids}}}",
              "createdAt": "2024-06-14T16:20:31Z",
              "updatedAt": "2024-06-14T16:20:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKigz-s5-SbOf",
          "commit": {
            "abbreviatedOid": "8d04679"
          },
          "author": "bob-beck",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-14T16:22:20Z",
          "updatedAt": "2024-06-14T16:22:20Z",
          "comments": [
            {
              "originalPosition": 102,
              "body": "s/binary/der/",
              "createdAt": "2024-06-14T16:22:20Z",
              "updatedAt": "2024-06-14T16:22:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKigz-s5-SbdD",
          "commit": {
            "abbreviatedOid": "8d04679"
          },
          "author": "bob-beck",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-14T16:22:53Z",
          "updatedAt": "2024-06-14T16:22:53Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKigz-s5-S1Dt",
          "commit": {
            "abbreviatedOid": "8d04679"
          },
          "author": "davidben",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-14T16:51:20Z",
          "updatedAt": "2024-06-14T16:51:20Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "Oh, this isn't an OID. Those are used to name the trust stores. This is an index into the `trust_anchors` object. (That part of the design also maybe needs work, but we're not doing anything with it just yet.)",
              "createdAt": "2024-06-14T16:51:20Z",
              "updatedAt": "2024-06-14T16:51:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKigz-s5-S1bT",
          "commit": {
            "abbreviatedOid": "8d04679"
          },
          "author": "davidben",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-14T16:52:22Z",
          "updatedAt": "2024-06-14T16:52:22Z",
          "comments": [
            {
              "originalPosition": 102,
              "body": "trust-store-ids refers to it as \"binary\". I didn't want to say DER because then we have to clarify whether the tag and length are included. (They're not.) So trust-store-ids defines it once by name and we reference it.",
              "createdAt": "2024-06-14T16:52:22Z",
              "updatedAt": "2024-06-14T16:52:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKigz-s5-TN83",
          "commit": {
            "abbreviatedOid": "8d04679"
          },
          "author": "bob-beck",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-14T17:58:25Z",
          "updatedAt": "2024-06-14T17:58:25Z",
          "comments": [
            {
              "originalPosition": 102,
              "body": "Yeah, let's not create more of the dreaded 20 octets fun. ",
              "createdAt": "2024-06-14T17:58:25Z",
              "updatedAt": "2024-06-14T17:58:25Z"
            }
          ]
        }
      ]
    },
    {
      "number": 31,
      "id": "PR_kwDOKigz-s5yuQWf",
      "title": "Clarify that \"which browser\" can include any browser using the same trust expression. ",
      "url": "https://github.com/davidben/tls-trust-expressions/pull/31",
      "state": "MERGED",
      "author": "bob-beck",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "In the Privacy section. \r\n\r\nDiscussion by Dennis Jackson on the mailing lists indicates this seems to be a point of confusion.",
      "createdAt": "2024-06-17T17:41:42Z",
      "updatedAt": "2024-06-18T00:59:06Z",
      "baseRepository": "davidben/tls-trust-expressions",
      "baseRefName": "main",
      "baseRefOid": "d20509e10cec37724981594c38725ab61957eaa4",
      "headRepository": "bob-beck/tls-trust-expressions",
      "headRefName": "main",
      "headRefOid": "a85ea288b397f2741a0cb0e75737bd9640be977b",
      "closedAt": "2024-06-18T00:59:06Z",
      "mergedAt": "2024-06-18T00:59:06Z",
      "mergedBy": "bob-beck",
      "mergeCommit": {
        "oid": "cef41e4a48fc3604231e5e08628a60d544e70531"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKigz-s5-l5WJ",
          "commit": {
            "abbreviatedOid": "280e8b8"
          },
          "author": "davidben",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-17T20:39:11Z",
          "updatedAt": "2024-06-17T20:39:11Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I think the discussion at the IETF thread has slightly misrepresented the point of this paragraph. It is not a complete analysis of all web browser scenarios. Rather, it is an illustrative example in service of the point of a Privacy Considerations section: to guide implementors in using the mechanism according to privacy expectations. Given that confusion, I think it's worth rephrasing this a bit to be more clear about the scope. (Trying to do a complete analysis will be very product-specific, and depend on things like frequency of trust store updates, which browsers share root programs, and whether the browser has an out-of-band update process.)\r\n\r\nMaybe something like this?\r\n\r\n```suggestion\r\nFor example, a web browser may support both a common set of trust anchors configured by the browser vendor, along with user-specified additions and removals. Applying the above guidance with a typical browser's desired anonymity set, the trust expression would reflect only the common trust anchors. User-specified modifications may reveal identifying information about the user.\r\n\r\nThis guidance limits the benefits of trust anchor agility in two ways:\r\n```\r\n\r\nI tried to say something about what common trust anchors reveal, but it got really, really long-winded and awkward to cover all bases. WDYT?",
              "createdAt": "2024-06-17T20:39:11Z",
              "updatedAt": "2024-06-17T20:39:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKigz-s5-l_DK",
          "commit": {
            "abbreviatedOid": "280e8b8"
          },
          "author": "bob-beck",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-17T20:55:17Z",
          "updatedAt": "2024-06-17T20:55:17Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I tweaked your text a bit. have a look\r\n",
              "createdAt": "2024-06-17T20:55:17Z",
              "updatedAt": "2024-06-17T20:55:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKigz-s5-mQ-8",
          "commit": {
            "abbreviatedOid": "4a97eba"
          },
          "author": "davidben",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-17T21:48:29Z",
          "updatedAt": "2024-06-17T21:48:30Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "> the trust expression would reflect only the common trust anchors for any web browsers using the same trust expression\r\n\r\nI think this is tautological and doesn't say what we're trying to say. Even if, say, a web browser decided to use the user-specified ones, it would be true that the trust expression only reflects trust anchors common to web browsers that use that trust expression. It's just that there's only one of them.\r\n\r\n\"common trust anchors\" was meant in reference to the first sentence in the paragraph:\r\n\r\n> For example, a web browser may support both a common set of trust anchors configured by a root program, along with user-specified additions and removals",
              "createdAt": "2024-06-17T21:48:29Z",
              "updatedAt": "2024-06-17T21:48:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKigz-s5-m5q6",
          "commit": {
            "abbreviatedOid": "4a97eba"
          },
          "author": "bob-beck",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-18T00:40:28Z",
          "updatedAt": "2024-06-18T00:40:28Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I was tryin to sneak in there the notion that it's not just the anonymity set of a single web browser, multiple web browsers could use the same trust expression provided by a root program. ",
              "createdAt": "2024-06-18T00:40:28Z",
              "updatedAt": "2024-06-18T00:40:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKigz-s5-m54W",
          "commit": {
            "abbreviatedOid": "4a97eba"
          },
          "author": "bob-beck",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-18T00:41:40Z",
          "updatedAt": "2024-06-18T00:41:40Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Or at least make that somewhat clearer to the reader, on first cut it sounds like the anonymity set is only the browser unless you are very careful reading it",
              "createdAt": "2024-06-18T00:41:40Z",
              "updatedAt": "2024-06-18T00:41:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKigz-s5-m8cb",
          "commit": {
            "abbreviatedOid": "4a97eba"
          },
          "author": "davidben",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-18T00:56:39Z",
          "updatedAt": "2024-06-18T00:56:39Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "How about this?\r\n\r\n```suggestion\r\nFor example, a web browser may support both a common set of trust anchors configured by a root program, along with user-specified additions and removals. Applying the above guidance with a typical browser's desired anonymity set, the trust expression would reflect only the common trust anchors and not the user-specified modifications. The user-specified modifications may reveal identifying information about the user, while the common trust anchors would reveal at most, e.g., which version of which browser is used, or even less information if multiple browsers share a root program or the trust anchors were unchanged across multiple versions of the browser.\r\n```",
              "createdAt": "2024-06-18T00:56:39Z",
              "updatedAt": "2024-06-18T00:56:39Z"
            }
          ]
        }
      ]
    },
    {
      "number": 32,
      "id": "PR_kwDOKigz-s5ywc01",
      "title": "Fix the TrustStoreInclusion for C1_new",
      "url": "https://github.com/davidben/tls-trust-expressions/pull/32",
      "state": "MERGED",
      "author": "devonobrien",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The labels for C1_new should match those specified i the example trust store manifest above.",
      "createdAt": "2024-06-17T23:55:44Z",
      "updatedAt": "2024-06-18T00:45:57Z",
      "baseRepository": "davidben/tls-trust-expressions",
      "baseRefName": "main",
      "baseRefOid": "0c2822ebaa411ed32e2266b41265455b2009b47c",
      "headRepository": "davidben/tls-trust-expressions",
      "headRefName": "devonobrien-fix-example-c1-new",
      "headRefOid": "7ad11cb9671bfdba89885d4566021ef3c192ab8a",
      "closedAt": "2024-06-18T00:45:48Z",
      "mergedAt": "2024-06-18T00:45:48Z",
      "mergedBy": "davidben",
      "mergeCommit": {
        "oid": "cf6dd30e82544c844e119a64b9ef55e41c0788fe"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKigz-s5-m6je",
          "commit": {
            "abbreviatedOid": "7ad11cb"
          },
          "author": "davidben",
          "authorAssociation": "OWNER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-18T00:45:34Z",
          "updatedAt": "2024-06-18T00:45:34Z",
          "comments": []
        }
      ]
    },
    {
      "number": 33,
      "id": "PR_kwDOKigz-s5ziGpB",
      "title": "Add a document discussion PKI transition strategies",
      "url": "https://github.com/davidben/tls-trust-expressions/pull/33",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "OWNER",
      "assignees": [
        "devonobrien",
        "bob-beck"
      ],
      "labels": [],
      "body": "We'll probably find more topics to discuss here, but this is already long enough to warrant its own document.",
      "createdAt": "2024-06-25T18:16:15Z",
      "updatedAt": "2024-06-25T18:22:08Z",
      "baseRepository": "davidben/tls-trust-expressions",
      "baseRefName": "main",
      "baseRefOid": "cef41e4a48fc3604231e5e08628a60d544e70531",
      "headRepository": "davidben/tls-trust-expressions",
      "headRefName": "transition-strategies",
      "headRefOid": "d7d9b9ac4d97a309e603a7835550f642c9f06915",
      "closedAt": "2024-06-25T18:22:05Z",
      "mergedAt": "2024-06-25T18:22:05Z",
      "mergedBy": "davidben",
      "mergeCommit": {
        "oid": "8b2e515a32a0e33da0a6675b3d5e8d5aae15513c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKigz-s5_hbIE",
          "commit": {
            "abbreviatedOid": "d7d9b9a"
          },
          "author": "bob-beck",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-25T18:20:45Z",
          "updatedAt": "2024-06-25T18:20:45Z",
          "comments": []
        }
      ]
    },
    {
      "number": 34,
      "id": "PR_kwDOKigz-s5zjcS5",
      "title": "Update explainer text a bit",
      "url": "https://github.com/davidben/tls-trust-expressions/pull/34",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "OWNER",
      "assignees": [
        "devonobrien"
      ],
      "labels": [],
      "body": "",
      "createdAt": "2024-06-25T22:04:58Z",
      "updatedAt": "2024-06-25T22:24:46Z",
      "baseRepository": "davidben/tls-trust-expressions",
      "baseRefName": "main",
      "baseRefOid": "8b2e515a32a0e33da0a6675b3d5e8d5aae15513c",
      "headRepository": "davidben/tls-trust-expressions",
      "headRefName": "explainer-update",
      "headRefOid": "f04268d9b8857e0fa3a89699e3264373fd5075bd",
      "closedAt": "2024-06-25T22:24:43Z",
      "mergedAt": "2024-06-25T22:24:43Z",
      "mergedBy": "davidben",
      "mergeCommit": {
        "oid": "52fb8e3761d26a6d789c0a038808c2771d0991cf"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKigz-s5_jYVI",
          "commit": {
            "abbreviatedOid": "f04268d"
          },
          "author": "devonobrien",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks for copying my comments over to GH. LGTM!",
          "createdAt": "2024-06-25T22:20:11Z",
          "updatedAt": "2024-06-25T22:20:11Z",
          "comments": []
        }
      ]
    },
    {
      "number": 35,
      "id": "PR_kwDOKigz-s5zuMJT",
      "title": "Clarify SCT-based distrust a bit",
      "url": "https://github.com/davidben/tls-trust-expressions/pull/35",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "OWNER",
      "assignees": [
        "devonobrien",
        "bob-beck"
      ],
      "labels": [],
      "body": "",
      "createdAt": "2024-06-27T05:38:20Z",
      "updatedAt": "2024-06-27T17:19:55Z",
      "baseRepository": "davidben/tls-trust-expressions",
      "baseRefName": "main",
      "baseRefOid": "52fb8e3761d26a6d789c0a038808c2771d0991cf",
      "headRepository": "davidben/tls-trust-expressions",
      "headRefName": "sct-distrust-clarify",
      "headRefOid": "37d64921c12a6ed97707c9d64e14f902a39d2423",
      "closedAt": "2024-06-27T17:19:52Z",
      "mergedAt": "2024-06-27T17:19:52Z",
      "mergedBy": "davidben",
      "mergeCommit": {
        "oid": "0e117cd3de3e50ea14c1d4e7d1a0e766bf19a5b5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKigz-s5_5o_6",
          "commit": {
            "abbreviatedOid": "69e40db"
          },
          "author": "devonobrien",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-27T15:49:16Z",
          "updatedAt": "2024-06-27T15:50:03Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "I like the direction this is going. Perhaps we could go with the following, from lines 159 - 163:\r\n\r\nSince Certificate Transparency pairs certificates with SCTs issued from a third party, these timestamps can be used to measure the cutoff date, so the distrusted CA cannot backdate certificates in CT-enforcing clients. Since the existence of SCTs implies the corresponding certificate is present in multiple CT logs, the set of remaining trusted certificates is known and will decrease over time as certificates expire or are replaced. While this strategy is a useful tool, it is not a complete solution:\r\n\r\n* Not all distrusts present fact patterns that lend themselves to SCT-based distrust. For example, if too many certificates were misissued before the cutoff date, revocation lists may become too large to feasibly deliver to clients. Moving cutoff dates earlier risks additional breakage for sites unaffected by misissuance. During PKI transitions, root programs evaluate such tradeoffs, picking the approach that best suits the security needs of their users. \r\n\r\n* There are certain CA failure modes for which trusting certificates before a certain date is inappropriate. For example, a CA that has been performing domain validation incorrectly may have never issued a certificate correctly. Auditing the entire corpus of certificates issued from this CA to determine which were misissued may be infeasible due to both scale and changes in subscribers and domain ownership over time. \r\n\r\n* Clients that do not enforce Certificate Transparency are also still vulnerable to backdating, since such certificates would successfully validate without the SCTs present to indicate the incorrect issuance time asserted in the certificate.\r\n\r\n* Additionally, this strategy does not help server operators address challenge (2). The server must still switch to a replacement CA before the cutoff date, under the same constraints as in a more straightforward distrust. The following section discusses this further.\r\n",
              "createdAt": "2024-06-27T15:49:16Z",
              "updatedAt": "2024-06-27T15:50:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKigz-s5_6buv",
          "commit": {
            "abbreviatedOid": "69e40db"
          },
          "author": "davidben",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-27T17:19:28Z",
          "updatedAt": "2024-06-27T17:19:28Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Applied",
              "createdAt": "2024-06-27T17:19:28Z",
              "updatedAt": "2024-06-27T17:19:28Z"
            }
          ]
        }
      ]
    },
    {
      "number": 36,
      "id": "PR_kwDOKigz-s5z8DKx",
      "title": "Trust Anchor Identifiers",
      "url": "https://github.com/davidben/tls-trust-expressions/pull/36",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "OWNER",
      "assignees": [
        "devonobrien",
        "bob-beck"
      ],
      "labels": [],
      "body": "",
      "createdAt": "2024-06-28T22:55:22Z",
      "updatedAt": "2024-06-28T22:59:44Z",
      "baseRepository": "davidben/tls-trust-expressions",
      "baseRefName": "main",
      "baseRefOid": "0e117cd3de3e50ea14c1d4e7d1a0e766bf19a5b5",
      "headRepository": "davidben/tls-trust-expressions",
      "headRefName": "trust-anchor-ids",
      "headRefOid": "136ed7e299209500e8e0506a4b11d99fb7526fbe",
      "closedAt": "2024-06-28T22:59:41Z",
      "mergedAt": "2024-06-28T22:59:41Z",
      "mergedBy": "davidben",
      "mergeCommit": {
        "oid": "90fe2b8b46892a6d33a7657f9437961a4074442c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKigz-s6AGHVv",
          "commit": {
            "abbreviatedOid": "136ed7e"
          },
          "author": "bob-beck",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-28T22:58:50Z",
          "updatedAt": "2024-06-28T22:58:50Z",
          "comments": []
        }
      ]
    },
    {
      "number": 37,
      "id": "PR_kwDOKigz-s5z_mip",
      "title": "Clarify that we omit the tag and length",
      "url": "https://github.com/davidben/tls-trust-expressions/pull/37",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "OWNER",
      "assignees": [
        "devonobrien",
        "bob-beck"
      ],
      "labels": [],
      "body": "X.690 unambiguous defines the \"contents octets\", but people probably don't have X.690 memorized, so add an extra sentence to further clarify it. Thanks to Russ Housley for pointing out this was confusing.",
      "createdAt": "2024-06-30T19:34:20Z",
      "updatedAt": "2024-07-02T21:29:15Z",
      "baseRepository": "davidben/tls-trust-expressions",
      "baseRefName": "main",
      "baseRefOid": "d060854042871eec9f85dc9af92352b09dc37b6b",
      "headRepository": "davidben/tls-trust-expressions",
      "headRefName": "clarify-contents-octets",
      "headRefOid": "40c0e099f302269870e0893272e84ba82d476d11",
      "closedAt": "2024-07-02T21:29:11Z",
      "mergedAt": "2024-07-02T21:29:11Z",
      "mergedBy": "davidben",
      "mergeCommit": {
        "oid": "fe7adb6f0fe3a23ef26e93a2eb8b6b9874dc52bf"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKigz-s6AadLi",
          "commit": {
            "abbreviatedOid": "40c0e09"
          },
          "author": "bob-beck",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-07-02T17:09:12Z",
          "updatedAt": "2024-07-02T17:09:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 38,
      "id": "PR_kwDOKigz-s50OZe4",
      "title": "Update the explainer text to cover both drafts",
      "url": "https://github.com/davidben/tls-trust-expressions/pull/38",
      "state": "MERGED",
      "author": "davidben",
      "authorAssociation": "OWNER",
      "assignees": [
        "devonobrien",
        "bob-beck"
      ],
      "labels": [],
      "body": "Since most of this applies equally to both, just switch to discussing \"trust anchor negotiation\" as a general problem space. Generalizing it also lets us talk about the interaction with pinning.",
      "createdAt": "2024-07-02T16:54:32Z",
      "updatedAt": "2024-07-02T17:29:51Z",
      "baseRepository": "davidben/tls-trust-expressions",
      "baseRefName": "main",
      "baseRefOid": "d060854042871eec9f85dc9af92352b09dc37b6b",
      "headRepository": "davidben/tls-trust-expressions",
      "headRefName": "explainer-both",
      "headRefOid": "5f347fd4a03be8b279e7ecaf952d2572a6220cf8",
      "closedAt": "2024-07-02T17:29:49Z",
      "mergedAt": "2024-07-02T17:29:49Z",
      "mergedBy": "davidben",
      "mergeCommit": {
        "oid": "6f407031d56ce84177de9ab4b557d2635d71c1e5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKigz-s6AaYh7",
          "commit": {
            "abbreviatedOid": "30575c0"
          },
          "author": "bob-beck",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-07-02T17:00:03Z",
          "updatedAt": "2024-07-02T17:02:52Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "handle this case more efficiently",
              "createdAt": "2024-07-02T17:00:04Z",
              "updatedAt": "2024-07-02T17:02:52Z"
            },
            {
              "originalPosition": 58,
              "body": "and perhaps reword \"the TLS Trust Anchor Identifiers option\" as just TLS Trust Anchor Identifiers (to mimic how you use TLS Trust Expressions)",
              "createdAt": "2024-07-02T17:01:32Z",
              "updatedAt": "2024-07-02T17:02:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKigz-s6AamLr",
          "commit": {
            "abbreviatedOid": "30575c0"
          },
          "author": "davidben",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-02T17:27:49Z",
          "updatedAt": "2024-07-02T17:27:49Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "Rephrased a bit. Put the TAI option first, which seemed more natural anyway.",
              "createdAt": "2024-07-02T17:27:49Z",
              "updatedAt": "2024-07-02T17:27:49Z"
            }
          ]
        }
      ]
    },
    {
      "number": 39,
      "id": "PR_kwDOKigz-s50P8Pv",
      "title": "Slightly tweak Privacy Considerations",
      "url": "https://github.com/davidben/tls-trust-expressions/pull/39",
      "state": "OPEN",
      "author": "davidben",
      "authorAssociation": "OWNER",
      "assignees": [
        "devonobrien",
        "bob-beck"
      ],
      "labels": [],
      "body": "Using a parallel wording between all three cases seems clearer. Also emphasize \"unconditionally\" and \"conditionally\" since we're basically defining terms.\r\n\r\nAlso fix a few places where double spaces snuck in from the Markdown export.",
      "createdAt": "2024-07-02T21:11:59Z",
      "updatedAt": "2024-07-02T21:11:59Z",
      "baseRepository": "davidben/tls-trust-expressions",
      "baseRefName": "main",
      "baseRefOid": "6f407031d56ce84177de9ab4b557d2635d71c1e5",
      "headRepository": "davidben/tls-trust-expressions",
      "headRefName": "privacy-considerations-editorial",
      "headRefOid": "c975240c47f4a8b85e2de51d9aa6c80c81516523",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    }
  ]
}